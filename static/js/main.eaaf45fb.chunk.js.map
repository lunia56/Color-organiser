{"version":3,"sources":["helpers/helpers.js","components/Star.js","components/StarRating.js","components/ColorProvider.js","components/Color.js","components/ColorList.js","components/AddColorForm.js","components/App.js","index.js"],"names":["createArray","length","Object","toConsumableArray","Array","useInput","initialValue","_useState","useState","_useState2","slicedToArray","value","setValue","onChange","e","target","Star","_ref","_ref$selected","selected","_ref$onSelect","onSelect","f","react_default","a","createElement","index_esm","color","onClick","StarRating","_ref$style","style","_ref$totalStars","totalStars","_ref$selectedStars","selectedStars","_ref$onRate","onRate","objectSpread","padding","map","n","i","components_Star","key","ColorContext","createContext","useColors","useContext","ColorProvider","children","colorData","colors","setColors","Provider","createColor","title","newColors","id","v4","rating","concat","rateColor","removeColor","filter","Color","_useColors","Card","width","marginBottom","Body","Title","Img","variant","height","backgroundColor","Text","components_StarRating","Button","ColorList","className","flexWrap","marginLeft","components_Color","assign","AddColorForm","_useInput","_useInput2","titleProps","resetTitle","_useInput3","_useInput4","colorProps","resetColor","marginTop","Form","onSubmit","preventDefault","Group","controlId","Control","type","placeholder","required","defaultValue","App","Fragment","components_AddColorForm","components_ColorList","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.eaaf45fb.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\n// функция которая создает массив из любой длины которая поступает как аргумент\r\nconst createArray = length => [...Array(length)]\r\n\r\nexport default createArray;\r\n\r\n\r\n\r\n// Пишем свой хук useInput который содержит состояние, и может менятся при нажатии на клавиши \r\nexport const useInput = initialValue => {\r\n    const [value, setValue] = useState(initialValue);\r\n    return [\r\n        { value, onChange: e => setValue(e.target.value) }, // event.target.value содержит в себе ссылку на dom элемент,где произошло событие\r\n        //при вводе доп символов, изменяем состояние и заново отображаем компонент\r\n        () => setValue(initialValue)\r\n    ];\r\n};","import React from 'react';\r\nimport { FaStar } from \"react-icons/fa\"\r\n\r\n// КОМПОНЕНТ Star отвечает за интерактивное отображение цвета звезды. вып-тся условная отрисовка. в этот компонент мы передаем состояние,\r\n// onSelect - тут мы создаем функцию пустышку, которую вешаем на событие onClick. \r\n//А в компоненте StarRating мы научим эту функцию менять состояние \r\n\r\nconst Star = ({ selected = false, onSelect = f => f }) => (\r\n    <FaStar color={selected ? \"red\" : \"grey\"} onClick={onSelect} />\r\n);\r\n\r\nexport default Star","import React from \"react\";\r\nimport createArray from \"../helpers/helpers\";\r\nimport Star from \"./Star\";\r\n\r\n// компонент StarRating содержит состояние и возвращает отрисовку звезд с описанием\r\nfunction StarRating({\r\n  style = {},\r\n  totalStars = 5,\r\n  selectedStars = 0,\r\n  onRate = f => f\r\n}) {\r\n\r\n  return (\r\n    //обернули компонент в див для придания инлайн стилей. установили свой стиль и передали все оcтальные стили через ...(оператор распространения)\r\n    // а так же добавили остальные пропсы для div для дальнейших нововведений\r\n\r\n    <div style={{ padding: \"5px\", ...style }} >\r\n      {/* создаем массив из кол-ва звезд,указанных в totalStars и передаем методу .map и из каждого элемента массива создаем компонент Star. \r\n    в Star передаем props : ключ и значение true или false для selected( аргумент Star по умолчанию false) */}\r\n\r\n      {createArray(totalStars).map((n, i) => (\r\n        <Star\r\n          key={i}\r\n          selected={selectedStars > i}\r\n          onSelect={() => onRate(i + 1)}\r\n        />\r\n      ))}\r\n      <p>\r\n        {selectedStars} звезд из {totalStars}  {/* выводим динамичное описание кол-ва выбранных звезд */}\r\n      </p>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default StarRating;\r\n","import React, { createContext, useContext, useState } from 'react';\r\nimport colorData from \"../color-data.json\";\r\nimport { v4 } from \"uuid\" // пакет для генерации уникальных id-шников\r\n\r\nexport const ColorContext = createContext(); // создаем контекст \r\n\r\nexport const useColors = () => useContext(ColorContext) // создаем свой хук для читаемости\r\n\r\n\r\n\r\n\r\nexport default function ColorProvider({ children }) {\r\n    const [colors, setColors] = useState(colorData)\r\n\r\n\r\n    // Добавление цвета\r\n    const createColor = (title, color) => {\r\n        const newColors = [\r\n\r\n            {\r\n                id: v4(),    // создаем новый объект цвета с уникальным id\r\n                rating: 0,   // по умолчанию рейтинг-0 \r\n                title,       // новый title и color\r\n                color\r\n            },\r\n            ...colors        // добавляем все старые цвета,\r\n        ];\r\n        setColors(newColors);// изменяем состояние добавляя обновленный массив с цветами\r\n    }\r\n\r\n\r\n    // изменение рейтинга\r\n    const rateColor = (id, rating) => {\r\n        const newColors = colors.map(color =>\r\n            color.id === id ? { ...color, rating } : color) // берем цвет, рейтинг которого был изменет, через map обновляем значение rating\r\n        // в этом цвете, и обновляем состояние через setColors\r\n        setColors(newColors)\r\n    }\r\n\r\n\r\n\r\n    //  удаление цвета\r\n    const removeColor = id => {\r\n        const newColors = colors.filter(color => color.id !== id)\r\n        setColors(newColors)\r\n    }\r\n    return (\r\n        <ColorContext.Provider value={{ colors, createColor, rateColor, removeColor }}>\r\n            {children}\r\n        </ColorContext.Provider>\r\n    );\r\n};","import React from 'react';\r\nimport StarRating from './StarRating';\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport { useColors } from \"./ColorProvider\"\r\nimport { Button, Card } from 'react-bootstrap';\r\n\r\n\r\nfunction Color({\r\n    id,\r\n    title,\r\n    color,\r\n    rating,\r\n}) {\r\n\r\n    const { rateColor, removeColor } = useColors()\r\n\r\n    return (\r\n        <section>\r\n            <Card style={{ width: '18rem', marginBottom: '15px', }}>\r\n\r\n                <Card.Body>\r\n                    <Card.Title>{title}</Card.Title>\r\n                    <Card.Img variant=\"top\" style={{ height: 150, backgroundColor: color }} />\r\n\r\n                    <Card.Text>\r\n                    </Card.Text>\r\n\r\n                    <StarRating\r\n                        selectedStars={rating}\r\n                        onRate={rating => rateColor(id, rating)}\r\n                    />\r\n                    <Button variant=\"outline-danger\" onClick={() => removeColor(id)}>\r\n                        <FaTrash />\r\n                    </Button>\r\n                </Card.Body>\r\n            </Card>\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\nexport default Color;","import React from 'react';\r\nimport Color from './Color';\r\nimport { useColors } from \"./ColorProvider\"\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nfunction ColorList() {\r\n    const { colors } = useColors();  // присваиваем контекст деструктурируемой переменной colors через хук useColors\r\n\r\n    if (!colors.length) return <div> No colors Listen. (Add a Color)</div>;\r\n    return (\r\n        <div className='d-flex justify-content-between ' style={{ flexWrap: \"wrap\", marginLeft: '5rem' }} >\r\n            {\r\n                colors.map(colors =>\r\n                    <Color\r\n                        key={colors.id}\r\n                        {...colors}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ColorList;\r\n","import React, { useState } from \"react\";\r\nimport { useInput } from \"../helpers/helpers\";\r\nimport { useColors } from \"./ColorProvider\"\r\nimport { Button, Form, Card } from 'react-bootstrap';\r\n\r\n\r\nconst AddColorForm = () => {\r\n\r\n    const [titleProps, resetTitle] = useInput(\"\"); //используем свой хук useInput\r\n    const [colorProps, resetColor] = useInput(\"#563d7c\");\r\n    const { createColor } = useColors();\r\n\r\n    const submit = e => {\r\n        e.preventDefault(); // отменяем автоматический POST запрос после отправки формы()\r\n        createColor(titleProps.value, colorProps.value);\r\n        resetTitle(); //сбрасываем атрибут value для обоих компонентов input, для очистки формы\r\n        resetColor();\r\n    };\r\n    return (\r\n\r\n        <Card style={{ width: '18rem', marginTop: '5rem', marginBottom: '5rem', marginLeft: '5rem' }}>\r\n\r\n            <Card.Body>\r\n                <Card.Title>Добавьте цвет</Card.Title>\r\n                <Form onSubmit={submit}>\r\n\r\n                    <Form.Group className=\"mb-3\" controlId=\"formGroupEmail\">\r\n\r\n                        <Form.Control {...titleProps} type=\"text\" placeholder=\"Название цвета...\" required />\r\n                    </Form.Group>\r\n                    <Form.Control\r\n                        {...colorProps}\r\n                        type=\"color\"\r\n                        id=\"exampleColorInput\"\r\n                        defaultValue=\"#563d7c\"\r\n                        title=\"Choose your color\"\r\n                        required\r\n                    />\r\n                    <Button variant=\"primary\" type=\"submit\" className=\"mt-2\">\r\n                        Добавить\r\n                    </Button>\r\n                </Form>\r\n            </Card.Body>\r\n        </Card>\r\n\r\n\r\n    )\r\n\r\n}\r\nexport default AddColorForm;\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport ColorList from \"./ColorList\";\r\nimport AddColorForm from \"./AddColorForm\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport default function App() {\r\n\r\n\r\n    return (\r\n        <>\r\n            <AddColorForm />\r\n            <ColorList />\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './components/App';\r\nimport ColorProvider from \"./components/ColorProvider\"\r\n\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <ColorProvider>\r\n    <App />\r\n  </ColorProvider>\r\n);\r\n\r\n"],"sourceRoot":""}